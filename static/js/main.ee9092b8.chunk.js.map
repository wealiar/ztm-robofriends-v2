{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/Header.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","actions.js","api/api.js","constants.js","containers/App.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","id","name","email","className","src","alt","CardList","robots","map","_","i","key","Header","nextProps","nextState","Component","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","hasError","info","this","setState","requestRobots","dispatch","link","fetch","response","json","data","payload","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","event","target","value","initialStateSearch","initialStateRequest","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ee9092b8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots' />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map((_, i) => {\n                    return (\n                        <Card\n                            key={robots[i].id}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React, { Component } from 'react';\n\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n\n    render() {\n        return <h1 className='f1'>Robo \n        Friends \n        PWA</h1>\n    }\n}\n\nexport default Header;","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n    console.log('SearchBox');\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\n    return (\n        <div style={{\n            overflowY: 'scroll',\n            border: '1px solid black',\n            height: '800px'\n        }}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({\n            hasError: true\n        });\n    }\n\n    render() {\n        const { hasError } = this.state;\n        if (hasError) {\n            return <h1>Ops. That is not good</h1>\n        };\n\n        return this.props.children;\n    }\n\n}\n\nexport default ErrorBoundry;","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\nimport { apiCall } from './api/api';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n\n    apiCall('https://jsonplaceholder.typicode.com/users')\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const apiCall = (link) => {\n    return fetch(link).then(response => response.json());\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport Header from '../components/Header';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css'\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n\n        return (isPending)\n            ? <h1 className='tc'> Loading </h1>\n            : (\n                <div className='tc'>\n                    <Header />\n                    <SearchBox searchChange={onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n\n    }\n}\n\nconst initialStateRequest = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state = initialStateRequest, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false });\n        default:\n            return state;\n    }\n}","import './components/wdyr';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n// const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}